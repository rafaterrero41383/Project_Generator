{
	"info": {
		"_postman_id": "add0d4a4-510b-403e-a39c-a4796099d11f",
		"name": "mx-ms-bc-rec-reference-data-apigee",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "31175952"
	},
	"item": [
		{
			"name": "EvaluateOnBoardingPartySuitability",
			"item": [
				{
					"name": "Step1-Omni start",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"token\", jsonData.token);",
									"pm.collectionVariables.set(\"consumerRequestId\", jsonData.clientId);",
									"pm.collectionVariables.set(\"identity-session-token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true,
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}"
							},
							{
								"key": "api-version",
								"value": "{{api-version}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"language\": \"es-ES\",\r\n    \"countryCode\": \"MEX\",\r\n    \"configurationId\": \"6374f3baf74a929d0a85b918\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://demo-api.incodesmile.com/omni/start"
					},
					"response": []
				},
				{
					"name": "Step2-Rec Retrieve OCR Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"La solicitud tiene los headers necesarios\", function () {\r",
									"    var headers = pm.request.getHeaders();\r",
									"    pm.expect(headers).to.have.property('consumerRequestId');\r",
									"    pm.expect(headers).to.have.property('identity-session-token');\r",
									"    pm.expect(headers).to.have.property('token');\r",
									"});\r",
									"\r",
									"pm.test(\"El cÃ³digo de estado es 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"El tiempo de respuesta es inferior a 10000 ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
									"});\r",
									"\r",
									"pm.test(\"Revisar que las propiedades del response esten presentes\", () => {\r",
									"  var responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.nested.property(\"documentation.documentContent.ocrData.identificationDevice.dateOfBirth\");\r",
									"    pm.expect(responseData).to.have.nested.property(\"documentation.documentContent.ocrData.identificationDevice.personName.fullName\");\r",
									"    pm.expect(responseData).to.have.nested.property(\"documentation.documentContent.ocrData.identificationDevice.personName.firstName\");\r",
									"    pm.expect(responseData).to.have.nested.property(\"documentation.documentContent.ocrData.identificationDevice.personName.familyName\");\r",
									"    pm.expect(responseData).to.have.nested.property(\"documentation.documentContent.ocrData.identificationDevice.personName.secondLastName\");\r",
									"    pm.expect(responseData).to.have.nested.property(\"documentation.documentContent.ocrData.identificationDevice.personName.fullNameMrz\");\r",
									"    pm.expect(responseData).to.have.nested.property(\"documentation.documentContent.ocrData.identificationDevice.curp\");\r",
									"    pm.expect(responseData).to.have.nested.property(\"documentation.documentContent.ocrData.identificationDevice.ocr\");\r",
									"    pm.expect(responseData).to.have.nested.property(\"documentation.documentContent.ocrData.identificationDevice.cic\");\r",
									"    pm.expect(responseData).to.have.nested.property(\"documentation.documentContent.ocrData.identificationDevice.voterKey\");\r",
									"    pm.expect(responseData).to.have.nested.property(\"documentation.documentContent.ocrData.identificationDevice.emissionNumber\");\r",
									"    pm.expect(responseData).to.have.nested.property(\"documentation.documentContent.ocrData.identificationDevice.expireAt\");\r",
									"    pm.expect(responseData).to.have.nested.property(\"documentation.documentContent.ocrData.identificationDevice.expirationDate\");\r",
									"    pm.expect(responseData).to.have.nested.property(\"documentation.documentContent.ocrData.identificationDevice.machineReadZone[0].value\");\r",
									"    pm.expect(responseData).to.have.nested.property(\"documentation.documentContent.ocrData.identificationDevice.machineReadZone[1].value\");\r",
									"    pm.expect(responseData).to.have.nested.property(\"documentation.documentContent.ocrData.identificationDevice.machineReadZone[2].value\");\r",
									"    pm.expect(responseData).to.have.nested.property(\"documentation.documentContent.ocrData.identificationDevice.gender\");\r",
									"    pm.expect(responseData).to.have.nested.property(\"documentation.documentContent.ocrData.identificationDevice.registrationDate\");\r",
									"    pm.expect(responseData).to.have.nested.property(\"documentation.documentContent.ocrData.identificationDevice.dateOfBirthCheckDigit\");\r",
									"    pm.expect(responseData).to.have.nested.property(\"documentation.documentContent.ocrData.identificationDevice.documentNumberCheckDigit\");\r",
									"    pm.expect(responseData).to.have.nested.property(\"documentation.documentContent.ocrData.identificationDevice.expirationDateCheckDigit\");\r",
									"    pm.expect(responseData).to.have.nested.property(\"documentation.documentContent.ocrData.identificationDevice.issueDate\");\r",
									"\r",
									"    pm.expect(responseData).to.have.nested.property(\"documentation.documentContent.ocrData.location[0].isFullAddress\");\r",
									"    pm.expect(responseData).to.have.nested.property(\"documentation.documentContent.ocrData.location[0].locationDescription\");\r",
									"    pm.expect(responseData).to.have.nested.property(\"documentation.documentContent.ocrData.location[0].street.streetName\");\r",
									"    pm.expect(responseData).to.have.nested.property(\"documentation.documentContent.ocrData.location[0].neighborhood\");\r",
									"    pm.expect(responseData).to.have.nested.property(\"documentation.documentContent.ocrData.location[0].postalAddress\");\r",
									"    pm.expect(responseData).to.have.nested.property(\"documentation.documentContent.ocrData.location[0].city.name\");\r",
									"    pm.expect(responseData).to.have.nested.property(\"documentation.documentContent.ocrData.location[0].state.name\");\r",
									"    pm.expect(responseData).to.have.nested.property(\"documentation.documentContent.ocrData.location[0].isInvalidAddress\");\r",
									"    pm.expect(responseData).to.have.nested.property(\"documentation.documentContent.ocrData.location[0].emissionDate\");\r",
									"\r",
									"    pm.expect(responseData).to.have.nested.property(\"rfc.partyReference.identifications[0].identifier.identifierValue\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "consumerRequestId",
								"value": "{{consumerRequestId}}"
							},
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "identity-session-token",
								"value": "{{identity-session-token}}"
							}
						],
						"url": "https://{{urlhost}}/experience/referenceData/v1/ocrDocument/retrieve"
					},
					"response": []
				},
				{
					"name": "Step3-Rec Evaluate On Boarding Party Suitability",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"La solicitud tiene los headers necesarios\", function () {\r",
									"    var headers = pm.request.getHeaders();\r",
									"    pm.expect(headers).to.have.property('consumerRequestId');\r",
									"    pm.expect(headers).to.have.property('identity-session-token');\r",
									"    pm.expect(headers).to.have.property('token');\r",
									"});\r",
									"\r",
									"pm.test(\"Check Status 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 10000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
									"});\r",
									"\r",
									"pm.test(\"El body tiene las propiedades necesarias.\", function () {\r",
									"    var requestBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"    // Verificar la presencia de 'partyReference' y sus propiedades internas\r",
									"    pm.expect(requestBody).to.have.property(\"partyReference\");\r",
									"    pm.expect(requestBody.partyReference).to.have.property(\"identificationDevice\");\r",
									"    pm.expect(requestBody.partyReference.identificationDevice).to.have.property(\"ocr\");\r",
									"    pm.expect(requestBody.partyReference.identificationDevice).to.have.property(\"cic\");\r",
									"    pm.expect(requestBody.partyReference.identificationDevice).to.have.property(\"voterKey\");\r",
									"    pm.expect(requestBody.partyReference.identificationDevice).to.have.property(\"emissionNumber\");\r",
									"    pm.expect(requestBody.partyReference.identificationDevice).to.have.property(\"curp\");\r",
									"\r",
									"    // Verificar la presencia del array 'identifications' dentro de 'partyReference'\r",
									"    pm.expect(requestBody.partyReference).to.have.property(\"identifications\");\r",
									"    pm.expect(requestBody.partyReference.identifications[0]).to.have.property(\"personIdentificationType\");\r",
									"    pm.expect(requestBody.partyReference.identifications[0]).to.have.property(\"identifier\");\r",
									"    pm.expect(requestBody.partyReference.identifications[0].identifier).to.have.property(\"identifierValue\");\r",
									"\r",
									"    // Verificar la presencia de 'publicDirectoryReference' y su array 'identifierValue'\r",
									"    pm.expect(requestBody).to.have.property(\"publicDirectoryReference\");\r",
									"    pm.expect(requestBody.publicDirectoryReference).to.have.property(\"identifierValue\");\r",
									"    pm.expect(requestBody.publicDirectoryReference.identifierValue).to.be.an('array').that.includes(\"sanction\");\r",
									"    // AquÃ­ podrÃ­as verificar la presencia de cada valor especÃ­fico en el array si es necesario\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Revisar que las propiedades del response esten presentes\", () => {\r",
									"    var responseData = pm.response.json(); // Obtener el response como JSON\r",
									"    \r",
									"    // Verificar la presencia del array 'qualificationTaskResult' dentro de 'qualification'\r",
									"    pm.expect(responseData).to.have.nested.property(\"qualification.qualificationTaskResult\");\r",
									"    \r",
									"    // Verificar la presencia de las propiedades 'result' y 'qualificationType' en cada objeto del array\r",
									"    responseData.qualification.qualificationTaskResult.forEach((item, index) => {\r",
									"        pm.expect(item).to.have.property(\"result\");\r",
									"        pm.expect(item).to.have.property(\"qualificationType\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "consumerRequestId",
								"value": "{{consumerRequestId}}"
							},
							{
								"key": "token",
								"value": "{{token}}"
							},
							{
								"key": "identity-session-token",
								"value": "{{identity-session-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"partyReference\": {\r\n        \"identificationDevice\": {\r\n            \"ocr\": \"0205069158382\",\r\n            \"cic\": \"237834933\",\r\n            \"voterKey\": \"MLZLMR80070501M100\",\r\n            \"emissionNumber\": \"05\",\r\n            \"curp\": \"MEZL860614HDFZRN05\"\r\n        },\r\n        \"identifications\": [\r\n            {\r\n                \"personIdentificationType\": \"Registro Federal Contribuyentes\",\r\n                \"identifier\": {\r\n                    \"identifierValue\": \"HS30375492ZE\"\r\n                }\r\n            }\r\n        ]\r\n    },\r\n    \"publicDirectoryReference\": {\r\n        \"identifierValue\": [\r\n            \"sanction\",\r\n            \"warning\",\r\n            \"fitness-probity\",\r\n            \"pep\",\r\n            \"pep-class-1\",\r\n            \"pep-class-2\",\r\n            \"pep-class-3\",\r\n            \"pep-class-4\",\r\n            \"adverse-media\",\r\n            \"adverse-media-financial-crime\",\r\n            \"adverse-media-violent-crime\",\r\n            \"adverse-media-sexual-crime\",\r\n            \"adverse-media-terrorism\",\r\n            \"adverse-media-fraud\",\r\n            \"adverse-media-narcotics\",\r\n            \"adverse-media-general\",\r\n            \"adverse-media-v2-property\",\r\n            \"adverse-media-v2-financial-aml-cft\",\r\n            \"adverse-media-v2-fraud-linked\",\r\n            \"adverse-media-v2-narcotics-aml-cft\",\r\n            \"adverse-media-v2-violence-aml-cft\",\r\n            \"adverse-media-v2-terrorism\",\r\n            \"adverse-media-v2-cybercrime\",\r\n            \"adverse-media-v2-general-aml-cft\",\r\n            \"adverse-media-v2-regulatory\",\r\n            \"adverse-media-v2-financial-difficulty\",\r\n            \"adverse-media-v2-other-financial\",\r\n            \"adverse-media-v2-other-serious\",\r\n            \"adverse-media-v2-other-minor\"\r\n        ]\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://{{urlhost}}/experience/referenceData/v1/onboardingPartySuitability/evaluate"
					},
					"response": []
				}
			]
		},
		{
			"name": "RetrieveCustomer",
			"item": [
				{
					"name": "success case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Responded in less than 800ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"});",
									"",
									"pm.test('validate response structure', () => {",
									"    pm.expect(responseData).to.have.property('partyReference');",
									"    pm.expect(responseData.partyReference).to.have.property('personName');",
									"    pm.expect(responseData.partyReference.personName).to.have.property('familyName');",
									"    pm.expect(responseData.partyReference.personName).to.have.property('secondLastName');",
									"    pm.expect(responseData.partyReference.personName).to.have.property('firstName');",
									"    pm.expect(responseData.partyReference.personName).to.have.property('secondName');",
									"    pm.expect(responseData.partyReference.personName).to.have.property('fullName');",
									"",
									"    pm.expect(responseData.partyReference).to.have.property('identifications');",
									"    pm.expect(Array.isArray(responseData.partyReference.identifications)).to.equal(true);",
									"    responseData.partyReference.identifications.forEach((identification) => {",
									"        pm.expect(identification).to.have.property('identifier');",
									"        pm.expect(identification.identifier).to.have.property('identifierValue');",
									"        pm.expect(identification).to.have.property('personIdentificationType');",
									"    });",
									"",
									"    pm.expect(responseData.partyReference).to.have.property('dateOfBirth');",
									"    pm.expect(responseData.partyReference).to.have.property('referenceId');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "consumerRequestId",
								"value": "1"
							},
							{
								"key": "token",
								"value": "1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"companyReference\": \"001\",\n    \"option\": 3,\n    \"partyReference\": {\n        \"personName\": {\n            \"familyName\": \"15276e7fd43ab63d6b0a6a3bc03f313f\",\n            \"secondLastName\": \"07232a5d792f96d44ac593e43d6592c3\",\n            \"firstName\": \"1276c190f7197fd82d7f0ad19c1c93d2\",\n            \"secondName\": \"da598699cef750ee8e5ef3b2daf47719\",\n            \"marriedName\": \"da598699cef750ee8e5ef3b2daf47719\",\n            \"fullName\": \"da598699cef750ee8e5ef3b2daf47719\"\n        },\n        \"identifications\": [\n            {\n                \"identifier\": {\n                    \"identifierValue\": \"A93B64AE1FB376A15EC21132E65B478F\"\n                },\n                \"personIdentificationType\": \"Registro Federal Contribuyentes\"\n            }\n        ],\n        \"dateOfBirth\": \"f5c4aa0648d87d54176a1e77000b6be8\",\n        \"contactPoint\": [\n            {\n                \"contactPointValue\": \"c2a63a9f1fce966ecabae6e7ee4204a3\",\n                \"contactPointType\": \"cellphone\"\n            }\n        ],\n        \"referenceId\": \"c2a63a9f1fce966ecabae6e7ee4204a3\"\n    },\n    \"paymentCard\": {\n        \"cardNumber\": \"D4DB7298729FCA8E66F1E69A28ECE2F0\"\n    },\n    \"accountIdentification\": [\n        {\n            \"identifierValue\": \"5F600B3C636E509D8B739C57EC1AAA4F\",\n            \"accountIdentificationType\": \"Account Number\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://{{urlhost}}/experience/referenceData/v1/customer/retrieve"
					},
					"response": []
				},
				{
					"name": "Should return bad response error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 400\", () => {",
									"  pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test(\"Responded in less than 800ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"});",
									"",
									"pm.test('validate response structure', () => {",
									"    pm.expect(responseData).to.have.property('statusCode');",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "consumerRequestId",
								"value": "1"
							},
							{
								"key": "token",
								"value": "1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"partyReference\": 123\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://{{urlhost}}/experience/referenceData/v1/customer/retrieve"
					},
					"response": []
				},
				{
					"name": "Should not found by http method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 404\", () => {",
									"  pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"pm.test(\"Responded in less than 800ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"});",
									"",
									"pm.test('validate response structure', () => {",
									"    pm.expect(responseData).to.have.property('statusCode');",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "consumerRequestId",
								"value": "1"
							},
							{
								"key": "token",
								"value": "1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"paymentOrderProcedure\": {\n        \"financialTransaction\": \"C8CF053EF5CE7AD676E6E8C0925FE368\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://{{urlhost}}/experience/referenceData/v1/customer/noExistingResource"
					},
					"response": []
				}
			]
		},
		{
			"name": "RetrievePaymentBalancesFacility",
			"item": [
				{
					"name": "success case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Responded in less than 800ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"});",
									"",
									"pm.test('validate response structure', () => {",
									"    pm.expect(responseData).to.have.property('paymentBalancesFacility');",
									"    pm.expect(responseData.paymentBalancesFacility).to.have.property('serviceAmount');",
									"    pm.expect(responseData.paymentBalancesFacility).to.have.property('currency');",
									"    pm.expect(responseData.paymentBalancesFacility).to.have.property('serviceAmountCharge');",
									"    pm.expect(responseData.paymentBalancesFacility).to.have.property('descriptionAmountService');",
									"    pm.expect(responseData.paymentBalancesFacility).to.have.property('descriptionAmountChargeService');",
									"    pm.expect(responseData.paymentBalancesFacility).to.have.property('description');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "consumerRequestId",
								"value": "1"
							},
							{
								"key": "token",
								"value": "1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"paymentBalancesFacility\": {\n        \"companyReference\": \"001\",\n        \"branch\": \"112\",\n        \"user\": \"50455252454f20494e54454e534f20\",\n        \"financialTransaction\": \"50455252454f20494e54454e534f20\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://{{urlhost}}/experience/referenceData/v1/retrievePaymentBalances/retrieve"
					},
					"response": []
				},
				{
					"name": "Should return bad response error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 400\", () => {",
									"  pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test(\"Responded in less than 800ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"});",
									"",
									"pm.test('validate response structure', () => {",
									"    pm.expect(responseData).to.have.property('statusCode');",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "consumerRequestId",
								"value": "1"
							},
							{
								"key": "token",
								"value": "1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"paymentBalancesFacility\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://{{urlhost}}/experience/referenceData/v1/retrievePaymentBalances/retrieve"
					},
					"response": []
				},
				{
					"name": "Should not found by http method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 404\", () => {",
									"  pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"pm.test(\"Responded in less than 800ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"});",
									"",
									"pm.test('validate response structure', () => {",
									"    pm.expect(responseData).to.have.property('statusCode');",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "consumerRequestId",
								"value": "1"
							},
							{
								"key": "token",
								"value": "1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"paymentOrderProcedure\": {\n        \"financialTransaction\": \"C8CF053EF5CE7AD676E6E8C0925FE368\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://{{urlhost}}/experience/referenceData/v1/retrievePaymentBalances/noExistingResource"
					},
					"response": []
				}
			]
		},
		{
			"name": "RetrieveCustomerCard",
			"item": [
				{
					"name": "success case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Responded in less than 800ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"});",
									"",
									"pm.test('validate response structure', () => {",
									"    pm.expect(responseData).to.have.property('partyReference');",
									"    pm.expect(responseData.partyReference).to.have.property('personName');",
									"    pm.expect(responseData.partyReference.personName).to.have.property('familyName');",
									"    pm.expect(responseData.partyReference.personName).to.have.property('secondLastName');",
									"    pm.expect(responseData.partyReference.personName).to.have.property('firstName');",
									"    pm.expect(responseData.partyReference.personName).to.have.property('secondName');",
									"",
									"    pm.expect(responseData.partyReference).to.have.property('identifications');",
									"    pm.expect(Array.isArray(responseData.partyReference.identifications)).to.equal(true);",
									"    responseData.partyReference.identifications.forEach((identification) => {",
									"        pm.expect(identification).to.have.property('identifier');",
									"        pm.expect(identification.identifier).to.have.property('identifierValue');",
									"        pm.expect(identification).to.have.property('personIdentificationType');",
									"    });",
									"",
									"    pm.expect(responseData.partyReference).to.have.property('referenceId');",
									"    pm.expect(responseData).to.have.property('paymentCard');",
									"    pm.expect(responseData.paymentCard).to.have.property('cardNumber');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "consumerRequestId",
								"value": "1"
							},
							{
								"key": "token",
								"value": "1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"companyReference\": \"001\",\n    \"accountIdentification\": [\n        {\n            \"identifierValue\": \"5F600B3C636E509D8B739C57EC1AAA4F\",\n            \"accountIdentificationType\": \"Account Number\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://{{urlhost}}/experience/referenceData/v1/customerCard/retrieve"
					},
					"response": []
				},
				{
					"name": "Should return bad response error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 400\", () => {",
									"  pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test(\"Responded in less than 800ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"});",
									"",
									"pm.test('validate response structure', () => {",
									"    pm.expect(responseData).to.have.property('statusCode');",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "consumerRequestId",
								"value": "1"
							},
							{
								"key": "token",
								"value": "1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accountIdentification\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://{{urlhost}}/experience/referenceData/v1/customerCard/retrieve"
					},
					"response": []
				},
				{
					"name": "Should not found by http method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 404\", () => {",
									"  pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"pm.test(\"Responded in less than 800ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"});",
									"",
									"pm.test('validate response structure', () => {",
									"    pm.expect(responseData).to.have.property('statusCode');",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "consumerRequestId",
								"value": "1"
							},
							{
								"key": "token",
								"value": "1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accountIdentification\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://{{urlhost}}/experience/referenceData/v1/customerCard/noExistingResource"
					},
					"response": []
				}
			]
		},
		{
			"name": "InitiateCustomerRelationshipInvolvement",
			"item": [
				{
					"name": "success case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Responded in less than 800ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"});",
									"",
									"pm.test('validate response structure', () => {",
									"    pm.expect(responseData).to.have.property('partyReference');",
									"    pm.expect(responseData.partyReference).to.have.property('personName');",
									"    pm.expect(responseData.partyReference.personName).to.have.property('familyName');",
									"    pm.expect(responseData.partyReference.personName).to.have.property('secondLastName');",
									"    pm.expect(responseData.partyReference.personName).to.have.property('firstName');",
									"    pm.expect(responseData.partyReference.personName).to.have.property('secondName');",
									"",
									"    pm.expect(responseData.partyReference).to.have.property('identifications');",
									"    pm.expect(Array.isArray(responseData.partyReference.identifications)).to.equal(true);",
									"    responseData.partyReference.identifications.forEach((identification) => {",
									"        pm.expect(identification).to.have.property('identifier');",
									"        pm.expect(identification.identifier).to.have.property('identifierValue');",
									"        pm.expect(identification).to.have.property('personIdentificationType');",
									"    });",
									"",
									"    pm.expect(responseData.partyReference).to.have.property('referenceId');",
									"    pm.expect(responseData).to.have.property('paymentCard');",
									"    pm.expect(responseData.paymentCard).to.have.property('cardNumber');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "consumerRequestId",
								"value": "1"
							},
							{
								"key": "token",
								"value": "1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"option\": \"C\",\n    \"applicationReferenceId\": \"5F600B3C636E509D8B73\",\n    \"partyReference\": {\n        \"referenceId\": \"5F600B3C636E509D8B73\",\n        \"employeeNumber\": \"sd23322\",\n        \"companyReference\": \"222\"\n    },\n    \"customerRelationshipInvolvement\": {\n        \"sequence\": 236670528,\n        \"partyReference\": {\n            \"location\": [{\n                    \"addressWorkingInhabitantsNumber\": \"22\"\n                }\n            ],\n            \"referenceId\": \"5F600B3C636E509D8B73\",\n            \"referenceIdCoppel\": \"sd232312wqu3892S7i22\",\n            \"bankBranch\": {\n                \"branchReference\": \"2222\"\n            },\n            \"personName\": {\n                \"firstName\": \"Tonis000000000000000000022\",\n                \"secondName\": \"Ramiro00000000000000000022\",\n                \"familyName\": \"Kroos000000000000000000022\",\n                \"secondLastName\": \"Shultz00000000000000000022\",\n                \"marriedName\": \"RAMIREZ9000000000000000022\"\n            },\n            \"maritalStatus\": \"22\",\n            \"gender\": \"2\",\n            \"nationality\": \"G22\",\n            \"contactPoint\": [{\n                    \"contactPointValue\": \"antonioramirokross99001122334455667788990011223344@gmail.c22\",\n                    \"contactPointType\": \"Electronic Address\"\n                }\n            ],\n            \"identifications\": [{\n                    \"identifier\": {\n                        \"identifierValue\": \"antonioramirokross990011223a22\"\n                    },\n                    \"personIdentificationType\": \"Numero Identificacion\"\n                }, {\n                    \"identifier\": {\n                        \"identifierValue\": \"22\"\n                    },\n                    \"personIdentificationType\": \"Codigo Identificacion\"\n                }, {\n                    \"identifier\": {\n                        \"identifierValue\": \"ARCS900104g22\"\n                    },\n                    \"personIdentificationType\": \"Registro Federal Contribuyentes\"\n                }, {\n                    \"identifier\": {\n                        \"identifierValue\": \"CURP900104hmcrrl0122\"\n                    },\n                    \"personIdentificationType\": \"ClaveUnicaRegistroPoblacion\"\n                }, {\n                    \"identifier\": {\n                        \"identifierValue\": \"DOCM900104hmcrrl0122\"\n                    },\n                    \"personIdentificationType\": \"Documentos Migratorios De No Emigrantes\"\n                }\n            ],\n            \"dateOfBirth\": \"1922-01-04 12:15:11\"\n        },\n        \"partyRelationshipType\": \"22\",\n        \"dateTime\": \"2022-05-13 12:35:11\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://{{urlhost}}/experience/referenceData/v1/customerRelationshipInvolvement/initiate"
					},
					"response": []
				},
				{
					"name": "Should return bad response error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 400\", () => {",
									"  pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test(\"Responded in less than 800ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"});",
									"",
									"pm.test('validate response structure', () => {",
									"    pm.expect(responseData).to.have.property('statusCode');",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "consumerRequestId",
								"value": "1"
							},
							{
								"key": "token",
								"value": "1",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"option\": \"C\",\n    \"applicationReferenceId\": \"5F600B3C636E509D8B73\",\n    \"partyReference\": {\n        \"referenceId\": \"5F600B3C636E509D8B73\",\n        \"employeeNumber\": \"sd23322\",\n        \"companyReference\": \"222\"\n    },\n    \"customerRelationshipInvolvement\": {\n        \"sequence\": 236670528,\n        \"partyReference\": {\n            \"location\": [{\n                    \"addressWorkingInhabitantsNumber\": \"22\"\n                }\n            ],\n            \"referenceId\": \"5F600B3C636E509D8B73\",\n            \"referenceIdCoppel\": \"sd232312wqu3892S7i22\",\n            \"bankBranch\": {\n                \"branchReference\": \"2222\"\n            },\n            \"personName\": {\n                \"firstName\": \"Tonis000000000000000000022\",\n                \"secondName\": \"Ramiro00000000000000000022\",\n                \"familyName\": \"Kroos000000000000000000022\",\n                \"secondLastName\": \"Shultz00000000000000000022\",\n                \"marriedName\": \"RAMIREZ9000000000000000022\"\n            },\n            \"maritalStatus\": \"22\",\n            \"gender\": \"2\",\n            \"nationality\": \"G22\",\n            \"contactPoint\": [{\n                    \"contactPointValue\": \"antonioramirokross99001122334455667788990011223344@gmail.c22\",\n                    \"contactPointType\": \"Electronic Address\"\n                }\n            ],\n            \"identifications\": [{\n                    \"identifier\": {\n                        \"identifierValue\": \"antonioramirokross990011223a22\"\n                    },\n                    \"personIdentificationType\": \"Numero Identificacion\"\n                }, {\n                    \"identifier\": {\n                        \"identifierValue\": \"22\"\n                    },\n                    \"personIdentificationType\": \"Codigo Identificacion\"\n                }, {\n                    \"identifier\": {\n                        \"identifierValue\": \"ARCS900104g22\"\n                    },\n                    \"personIdentificationType\": \"Registro Federal Contribuyentes\"\n                }, {\n                    \"identifier\": {\n                        \"identifierValue\": \"CURP900104hmcrrl0122\"\n                    },\n                    \"personIdentificationType\": \"ClaveUnicaRegistroPoblacion\"\n                }, {\n                    \"identifier\": {\n                        \"identifierValue\": \"DOCM900104hmcrrl0122\"\n                    },\n                    \"personIdentificationType\": \"Documentos Migratorios De No Emigrantes\"\n                }\n            ],\n            \"dateOfBirth\": \"1922-01-04 12:15:11\"\n        },\n        \"partyRelationshipType\": \"22\",\n        \"dateTime\": \"2022-05-13 12:35:11\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://{{urlhost}}/experience/referenceData/v1/customerRelationshipInvolvement/initiate"
					},
					"response": []
				},
				{
					"name": "Should not found by http method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 404\", () => {",
									"  pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"pm.test(\"Responded in less than 800ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"});",
									"",
									"pm.test('validate response structure', () => {",
									"    pm.expect(responseData).to.have.property('statusCode');",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "consumerRequestId",
								"value": "1"
							},
							{
								"key": "token",
								"value": "1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"option\": \"C\",\n    \"applicationReferenceId\": \"5F600B3C636E509D8B73\",\n    \"partyReference\": {\n        \"referenceId\": \"5F600B3C636E509D8B73\",\n        \"employeeNumber\": \"sd23322\",\n        \"companyReference\": \"222\"\n    },\n    \"customerRelationshipInvolvement\": {\n        \"sequence\": 236670528,\n        \"partyReference\": {\n            \"location\": [{\n                    \"addressWorkingInhabitantsNumber\": \"22\"\n                }\n            ],\n            \"referenceId\": \"5F600B3C636E509D8B73\",\n            \"referenceIdCoppel\": \"sd232312wqu3892S7i22\",\n            \"bankBranch\": {\n                \"branchReference\": \"2222\"\n            },\n            \"personName\": {\n                \"firstName\": \"Tonis000000000000000000022\",\n                \"secondName\": \"Ramiro00000000000000000022\",\n                \"familyName\": \"Kroos000000000000000000022\",\n                \"secondLastName\": \"Shultz00000000000000000022\",\n                \"marriedName\": \"RAMIREZ9000000000000000022\"\n            },\n            \"maritalStatus\": \"22\",\n            \"gender\": \"2\",\n            \"nationality\": \"G22\",\n            \"contactPoint\": [{\n                    \"contactPointValue\": \"antonioramirokross99001122334455667788990011223344@gmail.c22\",\n                    \"contactPointType\": \"Electronic Address\"\n                }\n            ],\n            \"identifications\": [{\n                    \"identifier\": {\n                        \"identifierValue\": \"antonioramirokross990011223a22\"\n                    },\n                    \"personIdentificationType\": \"Numero Identificacion\"\n                }, {\n                    \"identifier\": {\n                        \"identifierValue\": \"22\"\n                    },\n                    \"personIdentificationType\": \"Codigo Identificacion\"\n                }, {\n                    \"identifier\": {\n                        \"identifierValue\": \"ARCS900104g22\"\n                    },\n                    \"personIdentificationType\": \"Registro Federal Contribuyentes\"\n                }, {\n                    \"identifier\": {\n                        \"identifierValue\": \"CURP900104hmcrrl0122\"\n                    },\n                    \"personIdentificationType\": \"ClaveUnicaRegistroPoblacion\"\n                }, {\n                    \"identifier\": {\n                        \"identifierValue\": \"DOCM900104hmcrrl0122\"\n                    },\n                    \"personIdentificationType\": \"Documentos Migratorios De No Emigrantes\"\n                }\n            ],\n            \"dateOfBirth\": \"1922-01-04 12:15:11\"\n        },\n        \"partyRelationshipType\": \"22\",\n        \"dateTime\": \"2022-05-13 12:35:11\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://{{urlhost}}/experience/referenceData/v1/customerRelationshipInvolvement/initiatee"
					},
					"response": []
				}
			]
		},
		{
			"name": "InitiateIncomeProfile",
			"item": [
				{
					"name": "success case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Responded in less than 800ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"});",
									"",
									"pm.test('validate response structure', () => {",
									"    pm.expect(responseData).to.have.property('partyReference');",
									"    pm.expect(responseData.partyReference).to.have.property('personName');",
									"    pm.expect(responseData.partyReference.personName).to.have.property('familyName');",
									"    pm.expect(responseData.partyReference.personName).to.have.property('secondLastName');",
									"    pm.expect(responseData.partyReference.personName).to.have.property('firstName');",
									"    pm.expect(responseData.partyReference.personName).to.have.property('secondName');",
									"",
									"    pm.expect(responseData.partyReference).to.have.property('identifications');",
									"    pm.expect(Array.isArray(responseData.partyReference.identifications)).to.equal(true);",
									"    responseData.partyReference.identifications.forEach((identification) => {",
									"        pm.expect(identification).to.have.property('identifier');",
									"        pm.expect(identification.identifier).to.have.property('identifierValue');",
									"        pm.expect(identification).to.have.property('personIdentificationType');",
									"    });",
									"",
									"    pm.expect(responseData.partyReference).to.have.property('referenceId');",
									"    pm.expect(responseData).to.have.property('paymentCard');",
									"    pm.expect(responseData.paymentCard).to.have.property('cardNumber');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "consumerRequestId",
								"value": "123"
							},
							{
								"key": "token",
								"value": "456"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"companyReference\": \"001\",\n   \"option\": \"A\",\n   \"partyReference\": {\n      \"referenceId\":\"IFNlZ3VyaWRh\",\n      \"economicActivityIdentification\": \"U2VydmljaW9zIGRlIFNlZ3VyaWRhZCBQdWJsaWNhIChNdW5pY2lwYWwp\",\n      \"economicSubActivityIdentification\": \"U2VydmljaW9zIGRlIFNlZ3VyaWRhZCBQdWJsaWNhIChNdW5pY2lwYWwp\",\n      \"housingType\": \"c4ca4238a0b923820dcc509a6f75849b\",\n      \"employeeNumber\": \"c4ca4238a0b923820dcc509a6f75849b\",\n      \"personProfile\":{\n            \"pepProfile\":{\n                   \"role\":\"B277B9D408D34013A4BE9FA416B72638\"\n             }\n       }\n   },\n   \"incomeProfile\": {\n      \"sequence\": 13,\n      \"organisation\": {\n         \"organisationName\": \"Grupo F123\"\n      },\n      \"jobTitle\": {\n         \"name\": \"0\",\n         \"code\": \"12\"\n      },\n      \"otherIncome\": [\n         {\n            \"incomeType\": 1\n         }\n      ],\n      \"lengthOfService\": 2,\n      \"workUnit\": \"Unidad 1\",\n      \"supervisor\": \"Juan Perez\",\n      \"salaryAmount\": \"464E07AFC9E46359FB480839150595C5\",\n      \"salaryFrequency\": 5,\n      \"governmentIdentification\":6,\n      \"workforceSize\": \"50\"\n   }\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://{{urlhost}}/experience/referenceData/v1/incomeProfile/initiate"
					},
					"response": []
				},
				{
					"name": "Should return bad response error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 400\", () => {",
									"  pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test(\"Responded in less than 800ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"});",
									"",
									"pm.test('validate response structure', () => {",
									"    pm.expect(responseData).to.have.property('statusCode');",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "consumerRequestId",
								"value": "123"
							},
							{
								"key": "token",
								"value": "456",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"companyReference\": \"001\",\n   \"option\": \"A\",\n   \"partyReference\": {\n      \"referenceId\":\"IFNlZ3VyaWRh\",\n      \"economicActivityIdentification\": \"U2VydmljaW9zIGRlIFNlZ3VyaWRhZCBQdWJsaWNhIChNdW5pY2lwYWwp\",\n      \"economicSubActivityIdentification\": \"U2VydmljaW9zIGRlIFNlZ3VyaWRhZCBQdWJsaWNhIChNdW5pY2lwYWwp\",\n      \"housingType\": \"c4ca4238a0b923820dcc509a6f75849b\",\n      \"employeeNumber\": \"c4ca4238a0b923820dcc509a6f75849b\",\n      \"personProfile\":{\n            \"pepProfile\":{\n                   \"role\":\"B277B9D408D34013A4BE9FA416B72638\"\n             }\n       }\n   },\n   \"incomeProfile\": {\n      \"sequence\": 13,\n      \"organisation\": {\n         \"organisationName\": \"Grupo F123\"\n      },\n      \"jobTitle\": {\n         \"name\": \"0\",\n         \"code\": \"12\"\n      },\n      \"otherIncome\": [\n         {\n            \"incomeType\": 1\n         }\n      ],\n      \"lengthOfService\": 2,\n      \"workUnit\": \"Unidad 1\",\n      \"supervisor\": \"Juan Perez\",\n      \"salaryAmount\": \"464E07AFC9E46359FB480839150595C5\",\n      \"salaryFrequency\": 5,\n      \"governmentIdentification\":6,\n      \"workforceSize\": \"50\"\n   }\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https:://{{urlhost}}/experience/referenceData/v1/incomeProfile/initiate"
					},
					"response": []
				},
				{
					"name": "Should not found by http method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 404\", () => {",
									"  pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"pm.test(\"Responded in less than 800ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"});",
									"",
									"pm.test('validate response structure', () => {",
									"    pm.expect(responseData).to.have.property('statusCode');",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "consumerRequestId",
								"value": "1"
							},
							{
								"key": "token",
								"value": "1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"companyReference\": \"001\",\n   \"option\": \"A\",\n   \"partyReference\": {\n      \"referenceId\":\"IFNlZ3VyaWRh\",\n      \"economicActivityIdentification\": \"U2VydmljaW9zIGRlIFNlZ3VyaWRhZCBQdWJsaWNhIChNdW5pY2lwYWwp\",\n      \"economicSubActivityIdentification\": \"U2VydmljaW9zIGRlIFNlZ3VyaWRhZCBQdWJsaWNhIChNdW5pY2lwYWwp\",\n      \"housingType\": \"c4ca4238a0b923820dcc509a6f75849b\",\n      \"employeeNumber\": \"c4ca4238a0b923820dcc509a6f75849b\",\n      \"personProfile\":{\n            \"pepProfile\":{\n                   \"role\":\"B277B9D408D34013A4BE9FA416B72638\"\n             }\n       }\n   },\n   \"incomeProfile\": {\n      \"sequence\": 13,\n      \"organisation\": {\n         \"organisationName\": \"Grupo F123\"\n      },\n      \"jobTitle\": {\n         \"name\": \"0\",\n         \"code\": \"12\"\n      },\n      \"otherIncome\": [\n         {\n            \"incomeType\": 1\n         }\n      ],\n      \"lengthOfService\": 2,\n      \"workUnit\": \"Unidad 1\",\n      \"supervisor\": \"Juan Perez\",\n      \"salaryAmount\": \"464E07AFC9E46359FB480839150595C5\",\n      \"salaryFrequency\": 5,\n      \"governmentIdentification\":6,\n      \"workforceSize\": \"50\"\n   }\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://{{urlhost}}/experience/referenceData/v1/incomeProfile/initiate1"
					},
					"response": []
				}
			]
		},
		{
			"name": "ExecuteOnboardingParty",
			"item": [
				{
					"name": "success case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"pm.test(\"Responded in less than 800ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"});",
									"",
									"pm.test('validate response structure', () => {",
									"    pm.expect(responseData).to.have.property('partyReference');",
									"    pm.expect(responseData.partyReference).to.have.property('identifications');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "consumerRequestId",
								"value": "1"
							},
							{
								"key": "token",
								"value": "1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"partyRetailReferenceDataDirectoryEntry\": {\n    \"partyReference\": {\n      \"personName\": {\n        \"familyName\": \"Ortiz\",\n        \"secondLastName\": \"Lemus\",\n        \"firstName\": \"kristian\"\n      },\n      \"dateOfBirth\": \"2001-01-01\",\n      \"identifications\": [\n        {\n          \"identifier\": {\n            \"identifierValue\": \"55654121\"\n          },\n          \"personIdentificationType\": \"Numero Persona Coppel\"\n        }\n      ]\n    }\n  },\n  \"sessionDialogueIdentification\": \"GAFA9603064C3\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://{{urlhost}}/experience/referenceData/v1/onboardingParty/execute"
					},
					"response": []
				},
				{
					"name": "Should return bad response error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 400\", () => {",
									"  pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test(\"Responded in less than 800ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"});",
									"",
									"pm.test('validate response structure', () => {",
									"    pm.expect(responseData).to.have.property('statusCode');",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "consumerRequestId",
								"value": "1"
							},
							{
								"key": "token",
								"value": "1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"personal\": {\n    \"identifications\": [\n      {\n        \"identifier\": {\n          \"identifierValue\": \"c2a63a9f1fce966ecabae6e7ee4204a3\"\n        },\n        \"personIdentificationType\": \"Numero Persona Coppel\"\n      }\n    ]\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://{{urlhost}}/experience/referenceData/v1/onboardingParty/execute"
					},
					"response": []
				},
				{
					"name": "Should not found by http method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 404\", () => {",
									"  pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"pm.test(\"Responded in less than 800ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"});",
									"",
									"pm.test('validate response structure', () => {",
									"    pm.expect(responseData).to.have.property('statusCode');",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "consumerRequestId",
								"value": "1"
							},
							{
								"key": "token",
								"value": "1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"partyReferenceDataDirectoryEntry\": {\n        \"partyReference\": {\n            \"referenceId\": \"A93B64AE1FB376A15EC21132E65B478F\",\n            \"identifications\": [\n                {\n                    \"identifier\": {\n                        \"identifierValue\": \"A93B64AE1FB376A15EC21132E65B478F\"\n                    },\n                    \"personIdentificationType\": \"Registro Federal Contribuyentes\"\n                }\n            ],\n            \"personName\": {\n                \"familyName\": \"15276e7fd43ab63d6b0a6a3bc03f313f\",\n                \"secondLastName\": \"07232a5d792f96d44ac593e43d6592c3\",\n                \"firstName\": \"1276c190f7197fd82d7f0ad19c1c93d2\",\n                \"secondName\": \"da598699cef750ee8e5ef3b2daf47719\",\n                \"fullName\": \"da598699cef750ee8e5ef3b2daf47719\"\n            },\n            \"dateOfBirth\": \"f5c4aa0648d87d54176a1e77000b6be8\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://{{urlhost}}/experience/referenceData/v1/onboardingParty/initiateNoexisting"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "urlhost",
			"value": "nonprod.bancoppel.space",
			"type": "string"
		},
		{
			"key": "consumerRequestId",
			"value": "coppel158",
			"type": "string"
		},
		{
			"key": "token",
			"value": "eyJhbGciOiJIUzI1NiJ9.eyJleHRlcm5hbFVzZXJJZCI6IjY1ZGExYzBkNDllZjk1M2I014YjAyOGIzOCIsInJvbGUiOiJBQ0NFU1MiLCJUIjoiSSIsImtleVJlZiI6IjYxYjQwMzE5ODJkMjc3MDAxYWM2NGMzNCIsImV4cCI6MTcxNjU2ODg0NSwiaWF0IjoxNzA4NzkyODQ1fQ.r7eh3wMjrNTGovsitt7iAJHhMOgDSZuo9UzNQybf64c69",
			"type": "string"
		},
		{
			"key": "identity-session-token",
			"value": "eyJhbGciOiJIUzI1NiJ9.eyJleHRlcm5hbFVzZXJJZCI6IjY1ZGExYzBkNDllZjk1M2I014YjAyOGIzOCIsInJvbGUiOiJBQ0NFU1MiLCJUIjoiSSIsImtleVJlZiI6IjYxYjQwMzE5ODJkMjc3MDAxYWM2NGMzNCIsImV4cCI6MTcxNjU2ODg0NSwiaWF0IjoxNzA4NzkyODQ1fQ.r7eh3wMjrNTGovsitt7iAJHhMOgDSZuo9UzNQybf64c69",
			"type": "string"
		},
		{
			"key": "x-api-key",
			"value": "52b140ad469e89a8895d27879631e53708d6cf7f",
			"type": "string"
		},
		{
			"key": "api-version",
			"value": "1.0",
			"type": "string"
		}
	]
}